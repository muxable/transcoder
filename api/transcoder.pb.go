// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: transcoder.proto

package transcoder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Request_OfferSdp
	//	*Request_AnswerSdp
	//	*Request_Trickle
	Payload isRequest_Payload `protobuf_oneof:"payload"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcoder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_transcoder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_transcoder_proto_rawDescGZIP(), []int{0}
}

func (m *Request) GetPayload() isRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Request) GetOfferSdp() string {
	if x, ok := x.GetPayload().(*Request_OfferSdp); ok {
		return x.OfferSdp
	}
	return ""
}

func (x *Request) GetAnswerSdp() string {
	if x, ok := x.GetPayload().(*Request_AnswerSdp); ok {
		return x.AnswerSdp
	}
	return ""
}

func (x *Request) GetTrickle() string {
	if x, ok := x.GetPayload().(*Request_Trickle); ok {
		return x.Trickle
	}
	return ""
}

type isRequest_Payload interface {
	isRequest_Payload()
}

type Request_OfferSdp struct {
	OfferSdp string `protobuf:"bytes,1,opt,name=offer_sdp,json=offerSdp,proto3,oneof"`
}

type Request_AnswerSdp struct {
	AnswerSdp string `protobuf:"bytes,2,opt,name=answer_sdp,json=answerSdp,proto3,oneof"`
}

type Request_Trickle struct {
	Trickle string `protobuf:"bytes,3,opt,name=trickle,proto3,oneof"`
}

func (*Request_OfferSdp) isRequest_Payload() {}

func (*Request_AnswerSdp) isRequest_Payload() {}

func (*Request_Trickle) isRequest_Payload() {}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Reply_OfferSdp
	//	*Reply_AnswerSdp
	//	*Reply_Trickle
	Payload isReply_Payload `protobuf_oneof:"payload"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcoder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_transcoder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_transcoder_proto_rawDescGZIP(), []int{1}
}

func (m *Reply) GetPayload() isReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Reply) GetOfferSdp() string {
	if x, ok := x.GetPayload().(*Reply_OfferSdp); ok {
		return x.OfferSdp
	}
	return ""
}

func (x *Reply) GetAnswerSdp() string {
	if x, ok := x.GetPayload().(*Reply_AnswerSdp); ok {
		return x.AnswerSdp
	}
	return ""
}

func (x *Reply) GetTrickle() string {
	if x, ok := x.GetPayload().(*Reply_Trickle); ok {
		return x.Trickle
	}
	return ""
}

type isReply_Payload interface {
	isReply_Payload()
}

type Reply_OfferSdp struct {
	OfferSdp string `protobuf:"bytes,1,opt,name=offer_sdp,json=offerSdp,proto3,oneof"`
}

type Reply_AnswerSdp struct {
	AnswerSdp string `protobuf:"bytes,2,opt,name=answer_sdp,json=answerSdp,proto3,oneof"`
}

type Reply_Trickle struct {
	Trickle string `protobuf:"bytes,3,opt,name=trickle,proto3,oneof"`
}

func (*Reply_OfferSdp) isReply_Payload() {}

func (*Reply_AnswerSdp) isReply_Payload() {}

func (*Reply_Trickle) isReply_Payload() {}

var File_transcoder_proto protoreflect.FileDescriptor

var file_transcoder_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x22, 0x70,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12, 0x1a, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x63, 0x6b, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x63, 0x6b, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x6e, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12, 0x1a, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x63, 0x6b, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x63, 0x6b, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x32, 0x44, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x75, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transcoder_proto_rawDescOnce sync.Once
	file_transcoder_proto_rawDescData = file_transcoder_proto_rawDesc
)

func file_transcoder_proto_rawDescGZIP() []byte {
	file_transcoder_proto_rawDescOnce.Do(func() {
		file_transcoder_proto_rawDescData = protoimpl.X.CompressGZIP(file_transcoder_proto_rawDescData)
	})
	return file_transcoder_proto_rawDescData
}

var file_transcoder_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_transcoder_proto_goTypes = []interface{}{
	(*Request)(nil), // 0: transcoder.Request
	(*Reply)(nil),   // 1: transcoder.Reply
}
var file_transcoder_proto_depIdxs = []int32{
	0, // 0: transcoder.Transcoder.Signal:input_type -> transcoder.Request
	1, // 1: transcoder.Transcoder.Signal:output_type -> transcoder.Reply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_transcoder_proto_init() }
func file_transcoder_proto_init() {
	if File_transcoder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transcoder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcoder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transcoder_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Request_OfferSdp)(nil),
		(*Request_AnswerSdp)(nil),
		(*Request_Trickle)(nil),
	}
	file_transcoder_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Reply_OfferSdp)(nil),
		(*Reply_AnswerSdp)(nil),
		(*Reply_Trickle)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transcoder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transcoder_proto_goTypes,
		DependencyIndexes: file_transcoder_proto_depIdxs,
		MessageInfos:      file_transcoder_proto_msgTypes,
	}.Build()
	File_transcoder_proto = out.File
	file_transcoder_proto_rawDesc = nil
	file_transcoder_proto_goTypes = nil
	file_transcoder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TranscoderClient is the client API for Transcoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranscoderClient interface {
	Signal(ctx context.Context, opts ...grpc.CallOption) (Transcoder_SignalClient, error)
}

type transcoderClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscoderClient(cc grpc.ClientConnInterface) TranscoderClient {
	return &transcoderClient{cc}
}

func (c *transcoderClient) Signal(ctx context.Context, opts ...grpc.CallOption) (Transcoder_SignalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transcoder_serviceDesc.Streams[0], "/transcoder.Transcoder/Signal", opts...)
	if err != nil {
		return nil, err
	}
	x := &transcoderSignalClient{stream}
	return x, nil
}

type Transcoder_SignalClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type transcoderSignalClient struct {
	grpc.ClientStream
}

func (x *transcoderSignalClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transcoderSignalClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TranscoderServer is the server API for Transcoder service.
type TranscoderServer interface {
	Signal(Transcoder_SignalServer) error
}

// UnimplementedTranscoderServer can be embedded to have forward compatible implementations.
type UnimplementedTranscoderServer struct {
}

func (*UnimplementedTranscoderServer) Signal(Transcoder_SignalServer) error {
	return status.Errorf(codes.Unimplemented, "method Signal not implemented")
}

func RegisterTranscoderServer(s *grpc.Server, srv TranscoderServer) {
	s.RegisterService(&_Transcoder_serviceDesc, srv)
}

func _Transcoder_Signal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranscoderServer).Signal(&transcoderSignalServer{stream})
}

type Transcoder_SignalServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type transcoderSignalServer struct {
	grpc.ServerStream
}

func (x *transcoderSignalServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transcoderSignalServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Transcoder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transcoder.Transcoder",
	HandlerType: (*TranscoderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Signal",
			Handler:       _Transcoder_Signal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transcoder.proto",
}
