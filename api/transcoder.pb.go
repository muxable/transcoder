// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: transcoder.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TranscodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId          string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	TrackId           string `protobuf:"bytes,2,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	RtpStreamId       string `protobuf:"bytes,3,opt,name=rtp_stream_id,json=rtpStreamId,proto3" json:"rtp_stream_id,omitempty"`
	MimeType          string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	GstreamerPipeline string `protobuf:"bytes,5,opt,name=gstreamer_pipeline,json=gstreamerPipeline,proto3" json:"gstreamer_pipeline,omitempty"`
}

func (x *TranscodeRequest) Reset() {
	*x = TranscodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcoder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeRequest) ProtoMessage() {}

func (x *TranscodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transcoder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeRequest.ProtoReflect.Descriptor instead.
func (*TranscodeRequest) Descriptor() ([]byte, []int) {
	return file_transcoder_proto_rawDescGZIP(), []int{0}
}

func (x *TranscodeRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TranscodeRequest) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *TranscodeRequest) GetRtpStreamId() string {
	if x != nil {
		return x.RtpStreamId
	}
	return ""
}

func (x *TranscodeRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TranscodeRequest) GetGstreamerPipeline() string {
	if x != nil {
		return x.GstreamerPipeline
	}
	return ""
}

type TranscodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId    string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	TrackId     string `protobuf:"bytes,2,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	RtpStreamId string `protobuf:"bytes,3,opt,name=rtp_stream_id,json=rtpStreamId,proto3" json:"rtp_stream_id,omitempty"`
}

func (x *TranscodeResponse) Reset() {
	*x = TranscodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transcoder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeResponse) ProtoMessage() {}

func (x *TranscodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transcoder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeResponse.ProtoReflect.Descriptor instead.
func (*TranscodeResponse) Descriptor() ([]byte, []int) {
	return file_transcoder_proto_rawDescGZIP(), []int{1}
}

func (x *TranscodeResponse) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TranscodeResponse) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *TranscodeResponse) GetRtpStreamId() string {
	if x != nil {
		return x.RtpStreamId
	}
	return ""
}

var File_transcoder_proto protoreflect.FileDescriptor

var file_transcoder_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x6f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x72, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x32, 0x86, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x1a,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x75, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transcoder_proto_rawDescOnce sync.Once
	file_transcoder_proto_rawDescData = file_transcoder_proto_rawDesc
)

func file_transcoder_proto_rawDescGZIP() []byte {
	file_transcoder_proto_rawDescOnce.Do(func() {
		file_transcoder_proto_rawDescData = protoimpl.X.CompressGZIP(file_transcoder_proto_rawDescData)
	})
	return file_transcoder_proto_rawDescData
}

var file_transcoder_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_transcoder_proto_goTypes = []interface{}{
	(*TranscodeRequest)(nil),  // 0: api.TranscodeRequest
	(*TranscodeResponse)(nil), // 1: api.TranscodeResponse
	(*anypb.Any)(nil),         // 2: google.protobuf.Any
}
var file_transcoder_proto_depIdxs = []int32{
	2, // 0: api.Transcoder.Signal:input_type -> google.protobuf.Any
	0, // 1: api.Transcoder.Transcode:input_type -> api.TranscodeRequest
	2, // 2: api.Transcoder.Signal:output_type -> google.protobuf.Any
	1, // 3: api.Transcoder.Transcode:output_type -> api.TranscodeResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_transcoder_proto_init() }
func file_transcoder_proto_init() {
	if File_transcoder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transcoder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transcoder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transcoder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transcoder_proto_goTypes,
		DependencyIndexes: file_transcoder_proto_depIdxs,
		MessageInfos:      file_transcoder_proto_msgTypes,
	}.Build()
	File_transcoder_proto = out.File
	file_transcoder_proto_rawDesc = nil
	file_transcoder_proto_goTypes = nil
	file_transcoder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TranscoderClient is the client API for Transcoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranscoderClient interface {
	Signal(ctx context.Context, opts ...grpc.CallOption) (Transcoder_SignalClient, error)
	Transcode(ctx context.Context, in *TranscodeRequest, opts ...grpc.CallOption) (*TranscodeResponse, error)
}

type transcoderClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscoderClient(cc grpc.ClientConnInterface) TranscoderClient {
	return &transcoderClient{cc}
}

func (c *transcoderClient) Signal(ctx context.Context, opts ...grpc.CallOption) (Transcoder_SignalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transcoder_serviceDesc.Streams[0], "/api.Transcoder/Signal", opts...)
	if err != nil {
		return nil, err
	}
	x := &transcoderSignalClient{stream}
	return x, nil
}

type Transcoder_SignalClient interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ClientStream
}

type transcoderSignalClient struct {
	grpc.ClientStream
}

func (x *transcoderSignalClient) Send(m *anypb.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transcoderSignalClient) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transcoderClient) Transcode(ctx context.Context, in *TranscodeRequest, opts ...grpc.CallOption) (*TranscodeResponse, error) {
	out := new(TranscodeResponse)
	err := c.cc.Invoke(ctx, "/api.Transcoder/Transcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscoderServer is the server API for Transcoder service.
type TranscoderServer interface {
	Signal(Transcoder_SignalServer) error
	Transcode(context.Context, *TranscodeRequest) (*TranscodeResponse, error)
}

// UnimplementedTranscoderServer can be embedded to have forward compatible implementations.
type UnimplementedTranscoderServer struct {
}

func (*UnimplementedTranscoderServer) Signal(Transcoder_SignalServer) error {
	return status.Errorf(codes.Unimplemented, "method Signal not implemented")
}
func (*UnimplementedTranscoderServer) Transcode(context.Context, *TranscodeRequest) (*TranscodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transcode not implemented")
}

func RegisterTranscoderServer(s *grpc.Server, srv TranscoderServer) {
	s.RegisterService(&_Transcoder_serviceDesc, srv)
}

func _Transcoder_Signal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranscoderServer).Signal(&transcoderSignalServer{stream})
}

type Transcoder_SignalServer interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ServerStream
}

type transcoderSignalServer struct {
	grpc.ServerStream
}

func (x *transcoderSignalServer) Send(m *anypb.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transcoderSignalServer) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transcoder_Transcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscoderServer).Transcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Transcoder/Transcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscoderServer).Transcode(ctx, req.(*TranscodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transcoder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Transcoder",
	HandlerType: (*TranscoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transcode",
			Handler:    _Transcoder_Transcode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Signal",
			Handler:       _Transcoder_Signal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transcoder.proto",
}
